
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Oct 19 18:47:05 VET 2013
//----------------------------------------------------

package thinice.especificaciones;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Oct 19 18:47:05 VET 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\010\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\004\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\006\011\000\002\006" +
    "\015\000\002\007\007\000\002\010\007\000\002\021\011" +
    "\000\002\011\006\000\002\011\005\000\002\012\003\000" +
    "\002\012\003\000\002\020\005\000\002\020\005\000\002" +
    "\013\003\000\002\013\003\000\002\014\005\000\002\014" +
    "\005\000\002\014\004\000\002\014\003\000\002\015\005" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\017\005\000\002\017\005\000\002\017\003\000\002\026" +
    "\005\000\002\026\003\000\002\026\003\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\003\000" +
    "\002\024\005\000\002\024\003\000\002\024\003\000\002" +
    "\025\006\000\002\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\004\004\005\001\002\000\004\002\164\001" +
    "\002\000\004\025\006\001\002\000\004\026\007\001\002" +
    "\000\004\027\010\001\002\000\016\033\027\035\013\037" +
    "\025\040\016\041\012\044\023\001\002\000\004\005\163" +
    "\001\002\000\004\044\040\001\002\000\016\033\027\035" +
    "\013\037\025\040\016\041\012\044\023\001\002\000\044" +
    "\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\015\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\026\uffcd\032\uffcd\001\002\000\020\030" +
    "\154\033\027\035\013\037\025\040\016\041\012\044\023" +
    "\001\002\000\004\044\040\001\002\000\004\005\151\001" +
    "\002\000\022\030\ufffa\033\ufffa\035\ufffa\036\ufffa\037\ufffa" +
    "\040\ufffa\041\ufffa\044\ufffa\001\002\000\022\030\ufffc\033" +
    "\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\044\ufffc" +
    "\001\002\000\022\030\ufffe\033\ufffe\035\ufffe\036\ufffe\037" +
    "\ufffe\040\ufffe\041\ufffe\044\ufffe\001\002\000\010\013\uffcc" +
    "\025\145\031\111\001\002\000\022\030\ufffb\033\ufffb\035" +
    "\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\044\ufffb\001\002" +
    "\000\004\025\133\001\002\000\004\013\126\001\002\000" +
    "\004\025\032\001\002\000\004\005\031\001\002\000\022" +
    "\030\ufff9\033\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041" +
    "\ufff9\044\ufff9\001\002\000\014\016\037\025\046\042\033" +
    "\043\034\044\040\001\002\000\026\005\uffd7\014\uffd7\015" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\026\uffd7\001\002\000\042\005\uffd0\006\uffd0\007\uffd0\010" +
    "\uffd0\011\uffd0\012\uffd0\014\uffd0\015\uffd0\017\uffd0\020\uffd0" +
    "\021\uffd0\022\uffd0\023\uffd0\024\uffd0\026\uffd0\032\uffd0\001" +
    "\002\000\016\017\117\020\121\021\120\022\123\023\115" +
    "\024\116\001\002\000\042\005\uffd9\006\uffd9\007\uffd9\010" +
    "\056\011\057\012\060\014\uffd9\015\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\024\uffd9\026\uffd9\032\uffd9\001" +
    "\002\000\010\025\076\042\033\044\040\001\002\000\046" +
    "\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc" +
    "\023\uffcc\024\uffcc\026\uffcc\031\111\032\uffcc\001\002\000" +
    "\026\005\uffe8\014\uffe8\015\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\026\uffe8\001\002\000\042\005" +
    "\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\014\uffd2" +
    "\015\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024" +
    "\uffd2\026\uffd2\032\uffd2\001\002\000\026\005\uffe7\014\uffe7" +
    "\015\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024" +
    "\uffe7\026\uffe7\001\002\000\024\014\072\015\071\017\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\026\100\001" +
    "\002\000\026\005\uffe3\014\uffe3\015\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\022\uffe3\023\uffe3\024\uffe3\026\uffe3\001\002\000" +
    "\014\016\037\025\046\042\033\043\034\044\040\001\002" +
    "\000\032\005\uffeb\006\052\007\051\014\uffeb\015\uffeb\017" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\026\uffeb" +
    "\001\002\000\040\005\uffd6\006\uffcf\007\uffcf\010\uffcf\011" +
    "\uffcf\012\uffcf\014\uffd6\015\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\026\uffd6\001\002\000\010\025" +
    "\054\043\034\044\040\001\002\000\010\025\054\043\034" +
    "\044\040\001\002\000\042\005\uffcf\006\uffcf\007\uffcf\010" +
    "\uffcf\011\uffcf\012\uffcf\014\uffcf\015\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\022\uffcf\023\uffcf\024\uffcf\026\uffcf\032\uffcf\001" +
    "\002\000\010\025\054\043\034\044\040\001\002\000\042" +
    "\005\uffdb\006\uffdb\007\uffdb\010\056\011\057\012\060\014" +
    "\uffdb\015\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb" +
    "\024\uffdb\026\uffdb\032\uffdb\001\002\000\010\025\054\043" +
    "\034\044\040\001\002\000\010\025\054\043\034\044\040" +
    "\001\002\000\010\025\054\043\034\044\040\001\002\000" +
    "\042\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3" +
    "\014\uffd3\015\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023" +
    "\uffd3\024\uffd3\026\uffd3\032\uffd3\001\002\000\042\005\uffd4" +
    "\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\014\uffd4\015" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\026\uffd4\032\uffd4\001\002\000\042\005\uffd5\006\uffd5\007" +
    "\uffd5\010\uffd5\011\uffd5\012\uffd5\014\uffd5\015\uffd5\017\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\026\uffd5\032" +
    "\uffd5\001\002\000\010\006\052\007\051\026\065\001\002" +
    "\000\042\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012" +
    "\uffd1\014\uffd1\015\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\026\uffd1\032\uffd1\001\002\000\042\005" +
    "\uffda\006\uffda\007\uffda\010\056\011\057\012\060\014\uffda" +
    "\015\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\026\uffda\032\uffda\001\002\000\024\014\072\015\071" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\026" +
    "\073\001\002\000\024\006\052\007\051\017\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\024\uffeb\026\065\001\002\000" +
    "\010\025\076\042\033\044\040\001\002\000\010\025\076" +
    "\042\033\044\040\001\002\000\026\005\uffd8\014\uffd8\015" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\026\uffd8\001\002\000\026\005\uffe6\014\uffe6\015\uffe6\017" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\026\uffe6" +
    "\001\002\000\026\005\uffd6\014\uffd6\015\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\026\uffd6\001\002" +
    "\000\014\016\037\025\046\042\033\043\034\044\040\001" +
    "\002\000\026\005\uffe5\014\uffe5\015\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\024\uffe5\026\uffe5\001\002\000" +
    "\004\027\101\001\002\000\016\033\027\035\013\037\025" +
    "\040\016\041\012\044\023\001\002\000\020\030\104\033" +
    "\027\035\013\037\025\040\016\041\012\044\023\001\002" +
    "\000\022\030\uffff\033\uffff\035\uffff\036\uffff\037\uffff\040" +
    "\uffff\041\uffff\044\uffff\001\002\000\024\030\ufff3\033\ufff3" +
    "\034\105\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\044" +
    "\ufff3\001\002\000\004\027\106\001\002\000\016\033\027" +
    "\035\013\037\025\040\016\041\012\044\023\001\002\000" +
    "\020\030\110\033\027\035\013\037\025\040\016\041\012" +
    "\044\023\001\002\000\022\030\ufff2\033\ufff2\035\ufff2\036" +
    "\ufff2\037\ufff2\040\ufff2\041\ufff2\044\ufff2\001\002\000\010" +
    "\025\054\043\034\044\040\001\002\000\010\006\052\007" +
    "\051\032\113\001\002\000\044\005\uffce\006\uffce\007\uffce" +
    "\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\017" +
    "\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\026\uffce" +
    "\032\uffce\001\002\000\026\005\uffe4\014\uffe4\015\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\026\uffe4" +
    "\001\002\000\014\016\uffe1\025\uffe1\042\uffe1\043\uffe1\044" +
    "\uffe1\001\002\000\014\016\uffdc\025\uffdc\042\uffdc\043\uffdc" +
    "\044\uffdc\001\002\000\014\016\uffde\025\uffde\042\uffde\043" +
    "\uffde\044\uffde\001\002\000\014\016\uffe0\025\uffe0\042\uffe0" +
    "\043\uffe0\044\uffe0\001\002\000\014\016\uffdd\025\uffdd\042" +
    "\uffdd\043\uffdd\044\uffdd\001\002\000\014\016\037\025\046" +
    "\042\033\043\034\044\040\001\002\000\014\016\uffdf\025" +
    "\uffdf\042\uffdf\043\uffdf\044\uffdf\001\002\000\026\005\uffe2" +
    "\014\uffe2\015\uffe2\017\117\020\121\021\120\022\123\023" +
    "\115\024\116\026\uffe2\001\002\000\026\005\uffec\014\072" +
    "\015\071\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024" +
    "\uffec\026\uffec\001\002\000\014\016\037\025\046\042\033" +
    "\043\034\044\040\001\002\000\004\005\uffea\001\002\000" +
    "\020\005\uffe9\017\117\020\121\021\120\022\123\023\115" +
    "\024\116\001\002\000\040\005\uffd6\006\uffcf\007\uffcf\010" +
    "\uffcf\011\uffcf\012\uffcf\013\126\014\uffd6\015\uffd6\017\uffd6" +
    "\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\001\002\000" +
    "\004\027\142\001\002\000\004\044\040\001\002\000\004" +
    "\005\135\001\002\000\004\044\040\001\002\000\004\005" +
    "\137\001\002\000\014\016\037\025\046\042\033\043\034" +
    "\044\040\001\002\000\024\014\072\015\071\017\uffec\020" +
    "\uffec\021\uffec\022\uffec\023\uffec\024\uffec\026\141\001\002" +
    "\000\004\027\uffef\001\002\000\016\033\027\035\013\037" +
    "\025\040\016\041\012\044\023\001\002\000\020\030\144" +
    "\033\027\035\013\037\025\040\016\041\012\044\023\001" +
    "\002\000\022\030\ufff0\033\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\041\ufff0\044\ufff0\001\002\000\012\025\054\026" +
    "\147\043\034\044\040\001\002\000\004\026\150\001\002" +
    "\000\004\005\uffed\001\002\000\004\005\uffee\001\002\000" +
    "\022\030\ufffd\033\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd" +
    "\041\ufffd\044\ufffd\001\002\000\006\005\ufff6\013\126\001" +
    "\002\000\004\005\ufff4\001\002\000\004\002\001\001\002" +
    "\000\020\033\027\035\013\036\156\037\025\040\016\041" +
    "\012\044\023\001\002\000\014\016\037\025\046\042\033" +
    "\043\034\044\040\001\002\000\024\005\160\014\072\015" +
    "\071\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec" +
    "\001\002\000\022\030\ufff1\033\ufff1\035\ufff1\036\ufff1\037" +
    "\ufff1\040\ufff1\041\ufff1\044\ufff1\001\002\000\006\005\ufff7" +
    "\013\126\001\002\000\004\005\ufff5\001\002\000\022\030" +
    "\ufff8\033\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8" +
    "\044\ufff8\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\014\004\021\005\016\006\020\007\023\010\017\011" +
    "\027\020\010\022\025\025\013\001\001\000\002\001\001" +
    "\000\010\020\161\022\160\025\013\001\001\000\026\003" +
    "\154\004\021\005\016\006\020\007\023\010\017\011\027" +
    "\020\010\022\025\025\013\001\001\000\002\001\001\000" +
    "\024\004\102\005\016\006\020\007\023\010\017\011\027" +
    "\020\010\022\025\025\013\001\001\000\010\020\152\022" +
    "\151\025\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\012\034\013\043\014\040\015\042\017\046\022\047" +
    "\023\035\024\041\025\013\026\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\121\001\001\000\002" +
    "\001\001\000\010\022\074\025\013\026\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\012" +
    "\034\013\066\014\040\015\042\017\067\022\047\023\035" +
    "\024\041\025\013\026\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\022\052\023\065\024\041\025\013" +
    "\001\001\000\012\022\052\023\054\024\041\025\013\001" +
    "\001\000\002\001\001\000\014\017\063\022\052\023\035" +
    "\024\041\025\013\001\001\000\002\001\001\000\010\022" +
    "\052\024\062\025\013\001\001\000\010\022\052\024\061" +
    "\025\013\001\001\000\010\022\052\024\060\025\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\074\025\013" +
    "\026\076\001\001\000\010\022\074\025\013\026\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\012\034\013\066\014\040\015\042\017\046\022" +
    "\047\023\035\024\041\025\013\026\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\101\004\021\005" +
    "\016\006\020\007\023\010\017\011\027\020\010\022\025" +
    "\025\013\001\001\000\024\004\102\005\016\006\020\007" +
    "\023\010\017\011\027\020\010\022\025\025\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\106\004\021\005\016\006\020\007\023\010\017" +
    "\011\027\020\010\022\025\025\013\001\001\000\024\004" +
    "\102\005\016\006\020\007\023\010\017\011\027\020\010" +
    "\022\025\025\013\001\001\000\002\001\001\000\014\017" +
    "\111\022\052\023\035\024\041\025\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\012\123\013\124\014\040\015" +
    "\042\017\046\022\047\023\035\024\041\025\013\026\044" +
    "\001\001\000\002\001\001\000\004\016\121\001\001\000" +
    "\002\001\001\000\030\012\127\013\124\014\040\015\042" +
    "\017\046\020\126\022\130\023\035\024\041\025\013\026" +
    "\044\001\001\000\002\001\001\000\004\016\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\133\022" +
    "\025\025\013\001\001\000\002\001\001\000\010\020\135" +
    "\022\025\025\013\001\001\000\002\001\001\000\026\012" +
    "\034\013\137\014\040\015\042\017\046\022\047\023\035" +
    "\024\041\025\013\026\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\142\004\021\005\016\006\020" +
    "\007\023\010\017\011\027\020\010\022\025\025\013\001" +
    "\001\000\024\004\102\005\016\006\020\007\023\010\017" +
    "\011\027\020\010\022\025\025\013\001\001\000\002\001" +
    "\001\000\010\022\052\024\145\025\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\004\102\005\016\006\020\007\023\010\017\011" +
    "\027\020\010\022\025\025\013\001\001\000\026\012\034" +
    "\013\156\014\040\015\042\017\046\022\047\023\035\024" +
    "\041\025\013\026\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // var ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // var ::= vector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // vector ::= ID COR_IZ exp_aritmetica COR_DE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= PAR_IZ exp_aritmetica PAR_DE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // termino ::= factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // termino ::= termino OP_MODU factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // termino ::= termino OP_DIVI factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // termino ::= termino OP_MULTI factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // booleano ::= var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleano",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // booleano ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleano",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // booleano ::= PAR_IZ exp_booleana PAR_DE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleano",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp_aritmetica ::= termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_aritmetica",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp_aritmetica ::= exp_aritmetica OP_RESTA termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_aritmetica",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp_aritmetica ::= exp_aritmetica OP_SUMA termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_aritmetica",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // op_relacional ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_relacional",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // op_relacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_relacional",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // op_relacional ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_relacional",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // op_relacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_relacional",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // op_relacional ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_relacional",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // op_relacional ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_relacional",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp_relacional ::= exp op_relacional exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_relacional",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp_logica ::= booleano 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp_logica ::= OP_NEG booleano 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp_logica ::= exp_booleana OP_DISJ booleano 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp_logica ::= exp_booleana OP_CONJ booleano 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp_booleana ::= exp_relacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_booleana",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp_booleana ::= exp_logica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_booleana",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sent_asignacion ::= var ASIGNA exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_asignacion",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sent_asignacion ::= var ASIGNA sent_asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_asignacion",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= exp_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= exp_booleana 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sent_funcion ::= ID PAR_IZ PAR_DE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_funcion",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sent_funcion ::= ID PAR_IZ factor PAR_DE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_funcion",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp_para ::= PAR_IZ sent_asignacion PCOMA sent_asignacion PCOMA exp_booleana PAR_DE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_para",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sent_repita_para ::= PARA exp_para LLA_IZ lista_sent LLA_DE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_repita_para",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sent_repita_hasta ::= REPITA lista_sent HASTA exp_booleana PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_repita_hasta",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sent_si ::= SI PAR_IZ exp_booleana PAR_DE LLA_IZ lista_sent LLA_DE SINO LLA_IZ lista_sent LLA_DE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_si",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sent_si ::= SI PAR_IZ exp_booleana PAR_DE LLA_IZ lista_sent LLA_DE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_si",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sent_decl ::= TIPOBOOL sent_asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_decl",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sent_decl ::= TIPOENTERO sent_asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_decl",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sent_decl ::= TIPOBOOL var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_decl",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent_decl ::= TIPOENTERO var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_decl",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sent ::= sent_asignacion PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent ::= sent_funcion PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= sent_repita_para 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent ::= sent_repita_hasta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= sent_si 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= sent_decl PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_sent ::= sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sent",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_sent ::= lista_sent sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sent",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= PROGRAMA PAR_IZ PAR_DE LLA_IZ lista_sent LLA_DE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

