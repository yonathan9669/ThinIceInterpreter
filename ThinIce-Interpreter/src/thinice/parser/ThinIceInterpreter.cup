package thinice.parser;

//---------------------------Imported Libraries---------------------------------

import java_cup.runtime.*;
import thinice.util.*;
import thinice.lexer.*;
import thinice.AST.*;
import thinice.TS.*;

//---------------------------Code Definition------------------------------------

action code {: 

	boolean declaracion;

	int getLinea() {
		return ((ThinIceLexer)parser.getScanner()).getLinea();
	}

	int getColumna(){
		return ((ThinIceLexer)parser.getScanner()).getColumna();
	}

	AbstractSymbol getNombreArchivo() {
		return ((ThinIceLexer)parser.getScanner()).getNombreArchivo();
	}
:}

parser code {:
	int omerrs = 0;

	public int getOmerrs(){
		return omerrs;
	}

	public void syntax_error(Symbol cur_token) {
		int line = action_obj.getLinea();
		int column = action_obj.getColumna();
		String filename = action_obj.getNombreArchivo().getTexto();
		
		System.err.print(filename + ":\n#" + line + ":" + column + ": error de sintáxis cerca de ");
		Utilities.imprimirToken(cur_token);

		omerrs++;
		if (omerrs>50) {
			System.err.println("El análisis se ha detenido porque se encontraron muchos errores");
			System.exit(1);
		}
	}

	public void unrecovered_syntax_error(Symbol cur_token) {
	}
:}
//---------------------------Terminal Definition--------------------------------

terminal AbstractSymbol PROGRAM;
terminal AbstractSymbol PAR_I, PAR_D, LLA_I, LLA_D, COR_I, COR_D, PUNT_C, COMA;
terminal AbstractSymbol IF, ELSE, DO, WHILE, FOR;
terminal AbstractSymbol ASIG;
terminal AbstractSymbol SUMA, RESTA, MULTI, DIV, MOD;
terminal AbstractSymbol AND, OR, NOT;
terminal AbstractSymbol MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL, IGUAL, DIFERENTE;
terminal AbstractSymbol BOOLEANO, ENTERO;
terminal AbstractSymbol ID;
terminal AbstractSymbol ERROR;
terminal Integer INT, BOOLEAN;

//---------------------------No Terminal Definition-----------------------------

nonterminal Programa programa;
nonterminal ListaSentencia lista_sent;
//--------------------------------------------------
nonterminal Sentencia sent;
nonterminal Declaracion sent_decl;
nonterminal Integer tipo_var;
nonterminal Asignacion sent_asig;
nonterminal LlamadaFuncion func_call;
nonterminal ListaParametros opt_parm;
nonterminal ListaParametros lista_parm;
nonterminal Condicional sent_if;
nonterminal ListaSentencia else;
nonterminal RepitaHasta sent_do;
nonterminal RepitaPara sent_for;
//--------------------------------------------------
nonterminal Expresion exp;
nonterminal Expresion exp_booleana;
nonterminal Integer op_comparacion;
nonterminal Expresion exp_aritmetica;
nonterminal Expresion exp_factor;
nonterminal Expresion termino;
//--------------------------------------------------
nonterminal Constante literal;
nonterminal Variable variable;
nonterminal PosVector vector;

//---------------------------Precedence Definition------------------------------

precedence left PAR_I, PAR_D;
precedence left LLA_I, LLA_D;
precedence left COR_I, COR_D;
precedence left SUMA, RESTA;
precedence left MULTI, DIV, MOD;

//---------------------------Grammar Definition---------------------------------

programa ::=		PROGRAM:p PAR_I PAR_D LLA_I lista_sent:ls LLA_D
				{:
					RESULT = new Programa(ls, p.getLinea(), p.getColumna());
				:};


lista_sent ::=		lista_sent:ls sent:s
				{:
					ls.agregarElemento(s);
					RESULT = ls;
				:}
				|	sent:s
				{:
					RESULT = new ListaSentencia();
					RESULT.agregarElemento(s);
					
				:};


sent ::=			sent_decl:sd PUNT_C
				{:
					RESULT = sd;
				:}
				|	sent_asig:sa PUNT_C
				{:
					RESULT = sa;
				:}
				|	func_call:fc PUNT_C
				{:
					RESULT = fc;
				:}
				|	sent_if:si
				{:
					RESULT = si;
				:}
				|	sent_do:sdw PUNT_C
				{:
					RESULT = sdw;
				:}
				|	sent_for:sf
				{:
					RESULT = sf;
				:}
				|	ERROR:er
				{:
					RESULT = new SentError(er, getLinea(), getColumna());
				:};


sent_decl ::=		tipo_var:tv variable:v  
				{:
					RESULT = new DeclSimple(tv.intValue(), v, getLinea(), getColumna());
				:}
				|	tipo_var:tv sent_asig:sa
				{:
					RESULT = new DeclCompleja(tv.intValue(), sa, getLinea(), getColumna());
				:};
tipo_var ::=		INT:i
				{:
					RESULT = i;
				:}
				|	BOOLEAN:b
				{:
					RESULT = b;
				:};


sent_asig ::=		variable:v ASIG:a exp:e
				{:
					RESULT = new Asignacion(v, e, a.getLinea(), a.getColumna());
				:};


func_call ::=		ID:id PAR_I opt_parm:lp PAR_D
				{:
					RESULT = new LlamadaFuncion(id, lp, id.getLinea(), id.getColumna());
				:};
opt_parm ::=		lista_parm:lp
				{:
					RESULT = lp;
				:}
				|	
				{:
					RESULT = new ListaParametros();
				:};
lista_parm ::=		lista_parm:lp COMA exp:e
				{:
					lp.agregarElemento(e);
					RESULT = lp;
				:}
				|	exp:e
				{:
					RESULT = new ListaParametros();
					RESULT.agregarElemento(e);
				:};


sent_if ::=			IF:i PAR_I exp:e PAR_D LLA_I lista_sent:ls LLA_D else:el
				{:
					RESULT = new Condicional(e, ls, el, i.getLinea(), i.getColumna());
				:};
else ::=			ELSE LLA_I lista_sent:lse LLA_D
				{:
					RESULT = lse;
				:}
				|
				{:
					RESULT = null;
				:};


sent_do ::=			DO:d lista_sent:ls WHILE PAR_I exp:e PAR_D
				{:
					RESULT = new RepitaHasta(e, ls, d.getLinea(), d.getColumna());
				:};


sent_for ::=		FOR:f PAR_I sent_asig:sai PUNT_C sent_asig:sap PUNT_C exp:e PAR_D LLA_I lista_sent:ls LLA_D
				{:
					RESULT = new RepitaPara(sai, sap, e, ls, f.getLinea(), f.getColumna());
				:};


exp ::= 			exp_booleana:ebi AND:a exp_booleana:ebo
				{:
					RESULT = new And(ebi, ebo, a.getLinea(), a.getColumna());
				:}
				|	exp_booleana:ebi OR:o exp_booleana:ebo
				{:
					RESULT = new Or(ebi, ebo, o.getLinea(), o.getColumna());
				:}
				|	NOT:n exp:e
				{:
					RESULT = new Not(e, n.getLinea(), n.getColumna());
				:}
				|	exp_booleana:ebo
				{:
					RESULT = ebo;
				:};


exp_booleana ::=	exp_booleana:ebo op_comparacion:oc exp_aritmetica:ear
				{:
					RESULT = new Relacionales(ebo, ear, oc, getLinea(), getColumna());
				:}
				|	exp_aritmetica:ear
				{:
					RESULT = ear;
				:};
op_comparacion ::=	MENOR
				{:
					RESULT = Relacionales.MENOR;
				:}
				|	MENOR_IGUAL
				{:
					RESULT = Relacionales.MENOR_IGUAL;
				:}
				|	MAYOR_IGUAL
				{:
					RESULT = Relacionales.MAYOR_IGUAL;
				:}
				|	MAYOR
				{:
					RESULT = Relacionales.MAYOR;
				:}
				|	IGUAL
				{:
					RESULT = Relacionales.IGUAL;
				:}
				|	DIFERENTE
				{:
					RESULT = Relacionales.DIFERENTE;
				:};


exp_aritmetica ::=	exp_aritmetica:ear SUMA:s exp_factor:efa
				{:
					RESULT = new Suma(ear, efa, s.getLinea(), s.getColumna());
				:}
				|	exp_aritmetica:ear RESTA:r exp_factor:efa
				{:
					RESULT = new Resta(ear, efa, r.getLinea(), r.getColumna());
				:}
				|	exp_factor:efa
				{:
					RESULT = efa;
				:};


exp_factor ::=		exp_factor:efa MULTI:of termino:t
				{:
					RESULT = new Multiplicacion(efa, t, of.getLinea(), of.getColumna());
				:}
				|	exp_factor:efa DIV:of termino:t
				{:
					RESULT = new Division(efa, t, of.getLinea(), of.getColumna());
				:}
				|	exp_factor:efa MOD:of termino:t
				{:
					RESULT = new Modulo(efa, t, of.getLinea(), of.getColumna());
				:}
				|	termino:t
				{:
					RESULT = t;
				:};


termino ::=			PAR_I exp:e PAR_D
				{:
					RESULT = e;
				:}
				|	literal:li
				{:
					RESULT = li;
				:}
				|	variable:v
				{:
					RESULT = v;
				:};


literal ::=			ENTERO:i
				{:
					RESULT = new Entero(i, i.getLinea(), i.getColumna(), true);
				:}
				|	RESTA ENTERO:i
				{:
					RESULT = new Entero(i, i.getLinea(), i.getColumna(), false);
				:}
				|	BOOLEANO:b
				{:
					RESULT = new Booleano(b, b.getLinea(), b.getColumna());
				:};


variable ::=		ID:id
				{:
					RESULT = new Variable(id, id.getLinea(), id.getColumna());
				:}
				|	vector:vec
				{:
					RESULT = vec;
				:};


vector ::=			ID:id COR_I exp:e COR_D
				{:
					RESULT = new PosVector(AbstractTable.vecTabla.addSymbol(id, id.getLinea(), id.getColumna()),e ,id.getLinea(), id.getColumna());
				:};