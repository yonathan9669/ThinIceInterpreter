
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 21 01:20:11 VET 2013
//----------------------------------------------------

package thinice.parser;

import java_cup.runtime.*;
import thinice.util.*;
import thinice.lexer.*;
import thinice.AST.*;
import thinice.TS.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 21 01:20:11 VET 2013
  */
public class ThinIceParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ThinIceParser() {super();}

  /** Constructor which sets the default scanner. */
  public ThinIceParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ThinIceParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\002\000\002\002\010\000\002\002\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\011\000\004\004\005\001\002\000\004\002\013\001" +
    "\002\000\004\005\006\001\002\000\004\006\007\001\002" +
    "\000\004\007\010\001\002\000\002\001\002\000\004\010" +
    "\012\001\002\000\004\002\001\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\011\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ThinIceParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ThinIceParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ThinIceParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ThinIceParser$actions {

 

    int getLinea() {
        return ((ThinIceLexer)parser.getScanner()).getLinea();
    }

    int getColumna(){
        return ((ThinIceLexer)parser.getScanner()).getColumna();
    }

    /*
    SimboloAbstracto getNombreArchivo() {
        return ((ThinIceLexer)parser.getScanner()).getNombreArchivo();
    }
    */

  private final ThinIceParser parser;

  /** Constructor */
  CUP$ThinIceParser$actions(ThinIceParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ThinIceParser$do_action(
    int                        CUP$ThinIceParser$act_num,
    java_cup.runtime.lr_parser CUP$ThinIceParser$parser,
    java.util.Stack            CUP$ThinIceParser$stack,
    int                        CUP$ThinIceParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ThinIceParser$result;

      /* select the action based on the action number */
      switch (CUP$ThinIceParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		RESULT = start_val;
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ThinIceParser$parser.done_parsing();
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= PROGRAM PAR_I PAR_D LLA_I lista_sent LLA_D 
            {
              Object RESULT =null;

              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("programa",0, RESULT);
            }
          return CUP$ThinIceParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

