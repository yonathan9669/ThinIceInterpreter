/* The following code was generated by JFlex 1.4.3 on 25/10/13 01:12 AM */

package thinice.lexer;

import java_cup.runtime.*;
import thinice.parser.ThinIceTokenDef;
import thinice.TS.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 25/10/13 01:12 AM from the specification file
 * <tt>C:/Users/Oscar/Documents/NetBeansProjects/ThinIce-Interpreter/src/thinice/lexer/ThinIceInterpreter.flex</tt>
 */
public class ThinIceLexer implements java_cup.runtime.Scanner, ThinIceTokenDef {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 13, 12,  0, 13, 11,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    13, 40,  0,  0,  0,  0,  0,  0, 27, 28, 14, 35, 22, 36, 16, 15, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 33, 21, 41, 34, 42,  0, 
     0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 39, 
     2,  2,  2,  2,  2,  2,  2,  2,  2, 38,  2, 31,  0, 32,  0, 16, 
     0,  8, 23,  2, 37,  6,  7, 19, 26, 25,  2,  2,  9, 20, 24, 18, 
    17,  2,  4, 10,  3,  5,  2,  2,  2,  2,  2, 29,  0, 30,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\6\3\2\4\1\5\1\6\1\1"+
    "\2\3\1\7\1\10\2\3\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\1\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\3\1\1\4\3\1\27\3\0"+
    "\4\3\1\30\1\31\1\32\1\33\6\3\2\0\1\3"+
    "\1\34\3\3\1\35\2\3\1\36\1\0\1\4\1\37"+
    "\6\3\1\40\1\3\1\41\1\42\4\3\1\43\1\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\126\0\126\0\u01d9\0\u0204\0\u022f"+
    "\0\u025a\0\126\0\126\0\u0285\0\u02b0\0\126\0\126\0\126"+
    "\0\126\0\126\0\126\0\u02db\0\126\0\126\0\126\0\254"+
    "\0\254\0\126\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2\0\u03dd"+
    "\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4\0\u0204\0\u04df\0\u050a"+
    "\0\u0535\0\u0560\0\126\0\126\0\126\0\126\0\u058b\0\u05b6"+
    "\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\254"+
    "\0\u070e\0\u0739\0\u0764\0\254\0\u078f\0\u07ba\0\254\0\u07e5"+
    "\0\u068d\0\254\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc\0\u08e7"+
    "\0\254\0\u0912\0\254\0\254\0\u093d\0\u0968\0\u0993\0\u09be"+
    "\0\254\0\254";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\5\1\10\1\11"+
    "\2\5\1\12\1\13\2\14\1\15\1\16\1\17\1\20"+
    "\2\5\1\21\1\22\1\23\1\24\2\5\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\5\1\40\1\41\1\42\1\43\1\44\1\3"+
    "\1\4\1\5\1\6\1\7\1\5\1\10\1\11\2\5"+
    "\1\12\1\13\2\14\1\15\1\16\1\17\1\45\2\5"+
    "\1\21\1\22\1\23\1\24\2\5\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\5\1\40\1\41\1\42\1\43\1\44\54\0\1\4"+
    "\11\46\5\0\5\46\2\0\4\46\12\0\3\46\4\0"+
    "\1\46\11\5\5\0\1\46\4\5\2\0\4\5\12\0"+
    "\3\5\4\0\1\46\2\5\1\47\6\5\5\0\1\46"+
    "\4\5\2\0\4\5\12\0\3\5\4\0\1\46\4\5"+
    "\1\50\4\5\5\0\1\46\4\5\2\0\4\5\12\0"+
    "\3\5\4\0\1\46\11\5\5\0\1\46\4\5\2\0"+
    "\1\5\1\51\2\5\12\0\3\5\4\0\1\46\6\5"+
    "\1\52\2\5\5\0\1\46\4\5\2\0\4\5\12\0"+
    "\3\5\4\0\1\46\11\5\5\0\1\46\4\5\2\0"+
    "\2\5\1\53\1\5\12\0\3\5\17\0\1\14\54\0"+
    "\1\54\1\55\34\0\12\46\5\0\1\56\4\46\2\0"+
    "\4\46\12\0\3\46\4\0\1\46\6\5\1\57\2\5"+
    "\5\0\1\46\4\5\2\0\4\5\12\0\3\5\4\0"+
    "\1\46\11\5\5\0\1\46\1\5\1\60\2\5\2\0"+
    "\4\5\12\0\3\5\4\0\1\46\11\5\5\0\1\46"+
    "\1\5\1\61\2\5\2\0\4\5\12\0\3\5\4\0"+
    "\1\46\6\5\1\62\2\5\5\0\1\46\4\5\2\0"+
    "\4\5\12\0\3\5\45\0\1\63\52\0\1\64\7\0"+
    "\1\65\42\0\1\66\11\0\1\46\2\5\1\67\3\5"+
    "\1\57\2\5\5\0\1\46\4\5\2\0\4\5\12\0"+
    "\3\5\4\0\12\46\5\0\5\46\2\0\4\46\12\0"+
    "\3\46\4\0\1\46\3\5\1\70\5\5\5\0\1\46"+
    "\4\5\2\0\4\5\12\0\3\5\4\0\1\46\11\5"+
    "\5\0\1\46\1\71\3\5\2\0\4\5\12\0\3\5"+
    "\4\0\1\46\1\5\1\72\7\5\5\0\1\46\4\5"+
    "\2\0\4\5\12\0\3\5\4\0\1\46\7\5\1\73"+
    "\1\5\5\0\1\46\4\5\2\0\4\5\12\0\3\5"+
    "\4\0\1\46\11\5\5\0\1\46\4\5\2\0\1\5"+
    "\1\74\2\5\12\0\3\5\3\0\16\75\1\76\34\75"+
    "\13\55\1\13\1\14\36\55\1\0\1\46\2\5\1\77"+
    "\6\5\5\0\1\46\4\5\2\0\4\5\12\0\3\5"+
    "\4\0\1\46\11\5\5\0\1\46\4\5\2\0\4\5"+
    "\12\0\1\100\2\5\4\0\1\46\11\5\5\0\1\46"+
    "\1\5\1\101\2\5\2\0\4\5\12\0\3\5\4\0"+
    "\1\46\10\5\1\102\5\0\1\46\4\5\2\0\4\5"+
    "\12\0\3\5\4\0\1\46\11\5\5\0\1\46\1\5"+
    "\1\103\2\5\2\0\4\5\12\0\3\5\4\0\1\46"+
    "\4\5\1\104\4\5\5\0\1\46\4\5\2\0\4\5"+
    "\12\0\3\5\4\0\1\46\11\5\5\0\1\46\4\5"+
    "\2\0\2\5\1\105\1\5\12\0\3\5\4\0\1\46"+
    "\4\5\1\106\4\5\5\0\1\46\4\5\2\0\4\5"+
    "\12\0\3\5\4\0\1\46\10\5\1\70\5\0\1\46"+
    "\4\5\2\0\4\5\12\0\3\5\4\0\1\46\11\5"+
    "\5\0\1\46\1\5\1\107\2\5\2\0\4\5\12\0"+
    "\3\5\3\0\16\75\1\110\52\75\1\110\1\111\33\75"+
    "\1\0\1\46\6\5\1\112\2\5\5\0\1\46\4\5"+
    "\2\0\4\5\12\0\3\5\4\0\1\46\7\5\1\113"+
    "\1\5\5\0\1\46\4\5\2\0\4\5\12\0\3\5"+
    "\4\0\1\46\1\5\1\114\7\5\5\0\1\46\4\5"+
    "\2\0\4\5\12\0\3\5\4\0\1\46\11\5\5\0"+
    "\1\46\2\5\1\115\1\5\2\0\4\5\12\0\3\5"+
    "\4\0\1\46\1\5\1\116\7\5\5\0\1\46\4\5"+
    "\2\0\4\5\12\0\3\5\4\0\1\46\2\5\1\117"+
    "\6\5\5\0\1\46\4\5\2\0\4\5\12\0\3\5"+
    "\3\0\16\75\1\110\1\14\33\75\1\0\1\46\4\5"+
    "\1\120\4\5\5\0\1\46\4\5\2\0\4\5\12\0"+
    "\3\5\4\0\1\46\6\5\1\121\2\5\5\0\1\46"+
    "\4\5\2\0\4\5\12\0\3\5\4\0\1\46\2\5"+
    "\1\122\6\5\5\0\1\46\4\5\2\0\4\5\12\0"+
    "\3\5\4\0\1\46\6\5\1\123\2\5\5\0\1\46"+
    "\4\5\2\0\4\5\12\0\3\5\4\0\1\46\11\5"+
    "\5\0\1\46\1\5\1\124\2\5\2\0\4\5\12\0"+
    "\3\5\4\0\1\46\6\5\1\125\2\5\5\0\1\46"+
    "\4\5\2\0\4\5\12\0\3\5\4\0\1\46\6\5"+
    "\1\126\2\5\5\0\1\46\4\5\2\0\4\5\12\0"+
    "\3\5\4\0\1\46\11\5\5\0\1\46\4\5\2\0"+
    "\1\5\1\127\2\5\12\0\3\5\4\0\1\46\11\5"+
    "\5\0\1\46\3\5\1\130\2\0\4\5\12\0\3\5"+
    "\4\0\1\46\11\5\5\0\1\46\1\5\1\131\2\5"+
    "\2\0\4\5\12\0\3\5\4\0\1\46\6\5\1\132"+
    "\2\5\5\0\1\46\4\5\2\0\4\5\12\0\3\5"+
    "\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2537];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\10\1\2\11\4\1\2\11\2\1\6\11"+
    "\1\1\3\11\2\1\1\11\11\1\3\0\4\1\4\11"+
    "\6\1\2\0\11\1\1\0\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private SimboloAbstracto nombreArchivo;
	
	public int getLinea(){
		return yyline+1;
	}
	
	public int getColumna(){
		return yycolumn+1;
	}

	private Symbol symbol(int type) {
		return new Symbol(type, yyline + 1, yycolumn + 1);
	}

	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline + 1, yycolumn + 1, value);
	}

	public void setNombreArchivo(String nombre) {
		nombreArchivo = TablaAbstracta.texTabla.agregarSimbolo(nombre, getLinea(), getColumna());
	}

	public SimboloAbstracto getNombreArchivo() {
		return nombreArchivo;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ThinIceLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ThinIceLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 29: 
          { return symbol(BOOLEANO,		TablaAbstracta.boolTabla.agregarSimbolo(yytext(), getLinea(), getColumna()));
          }
        case 37: break;
        case 23: 
          { return symbol(IF,				new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 38: break;
        case 27: 
          { return symbol(MAYOR_IGUAL,	new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 39: break;
        case 15: 
          { return symbol(IGUAL,			new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 40: break;
        case 16: 
          { return symbol(SUMA,			new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 41: break;
        case 18: 
          { return symbol(AND,			new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 42: break;
        case 7: 
          { return symbol(PUNT_C,			new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 43: break;
        case 1: 
          { return symbol(ERROR,			new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 44: break;
        case 21: 
          { return symbol(MENOR,			new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 45: break;
        case 36: 
          { return symbol(PROGRAM,		new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 46: break;
        case 22: 
          { return symbol(MAYOR,			new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 47: break;
        case 28: 
          { return symbol(MOD,			new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 48: break;
        case 11: 
          { return symbol(LLA_I,			new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 49: break;
        case 9: 
          { return symbol(PAR_I,			new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 50: break;
        case 17: 
          { return symbol(RESTA,			new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 51: break;
        case 35: 
          { return symbol(BOOLEAN,		new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 52: break;
        case 19: 
          { return symbol(OR,				new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 53: break;
        case 3: 
          { return symbol(ID,				TablaAbstracta.idTabla.agregarSimbolo(yytext(), getLinea(), getColumna()));
          }
        case 54: break;
        case 13: 
          { return symbol(COR_I,			new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 55: break;
        case 5: 
          { return symbol(MULTI,			new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 56: break;
        case 32: 
          { return symbol(WHILE,			new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 57: break;
        case 12: 
          { return symbol(LLA_D,			new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 58: break;
        case 6: 
          { return symbol(DIV,			new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 59: break;
        case 33: 
          { return symbol(DO,				new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 60: break;
        case 10: 
          { return symbol(PAR_D,			new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 61: break;
        case 25: 
          { return symbol(MENOR_IGUAL,	new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 62: break;
        case 24: 
          { return symbol(ASIG,			new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 63: break;
        case 34: 
          { return symbol(INT,			new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 64: break;
        case 30: 
          { return symbol(ELSE,			new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 65: break;
        case 31: 
          { return symbol(FOR,			new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 66: break;
        case 20: 
          { return symbol(NOT,			new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 67: break;
        case 26: 
          { return symbol(DIFERENTE,		new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 68: break;
        case 8: 
          { return symbol(COMA,			new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 69: break;
        case 14: 
          { return symbol(COR_D,			new SimboloTexto(yytext(), getLinea(), getColumna()));
          }
        case 70: break;
        case 2: 
          { return symbol(ENTERO,			TablaAbstracta.intTabla.agregarSimbolo(yytext(), getLinea(), getColumna()));
          }
        case 71: break;
        case 4: 
          { 
          }
        case 72: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return symbol(EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
