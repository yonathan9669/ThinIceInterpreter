package thinice.parser;

//---------------------------Imported Libraries---------------------------------

import java_cup.runtime.*;
import thinice.util.*;
import thinice.lexer.*;
import thinice.AST.*;
import thinice.TS.*;

//---------------------------Code Definition------------------------------------

action code {: 

    int getLinea() {
        return ((ThinIceLexer)parser.getScanner()).getLinea();
    }

    int getColumna(){
        return ((ThinIceLexer)parser.getScanner()).getColumna();
    }

    /*
    SimboloAbstracto getNombreArchivo() {
        return ((ThinIceLexer)parser.getScanner()).getNombreArchivo();
    }
    */
:}

//---------------------------Terminal Definition--------------------------------

terminal PROGRAM;
terminal PAR_I, PAR_D, LLA_I, LLA_D, COR_I, COR_D, PUNT_C;
terminal INT, BOOL;
terminal IF, ELSE, DO, WHILE, FOR;
terminal ASIG;
terminal SUMA, RESTA, MULTI, DIV, MOD;
terminal AND, OR, NOT;
terminal MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL, IGUAL, DIFERENTE;
terminal BOOLEANO, ENTERO;
terminal ID;
terminal EMPTY, ERROR;

//---------------------------No Terminal Definition-----------------------------

nonterminal programa;
nonterminal lista_sent;
//--------------------------------------------------
nonterminal sent;
nonterminal sent_decl;
nonterminal tipo_var;
nonterminal sent_asig;
nonterminal func_call;
nonterminal lista_parm;
nonterminal sent_if;
nonterminal else;
nonterminal sent_do;
nonterminal sent_for;
//--------------------------------------------------
nonterminal exp;
nonterminal exp_binaria;
nonterminal exp_booleana;
nonterminal op_comparacion;
nonterminal exp_aritmetica;
nonterminal op_aritmetica;
nonterminal exp_factor;
nonterminal op_factor;
nonterminal termino;
//--------------------------------------------------
nonterminal literal;
nonterminal variable;
nonterminal vector;

//---------------------------Precedence Definition------------------------------

precedence left PAR_I, PAR_D;
precedence left LLA_I, LLA_D;
precedence left COR_I, COR_D;
precedence left SUMA, RESTA;
precedence left MULTI, DIV, MOD;

//---------------------------Grammar Definition---------------------------------

programa ::=    PROGRAM PAR_I PAR_D LLA_I lista_sent LLA_D;
