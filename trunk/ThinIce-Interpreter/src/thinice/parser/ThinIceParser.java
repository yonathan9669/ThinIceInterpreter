
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 24 16:25:37 VET 2013
//----------------------------------------------------

package thinice.parser;

import java_cup.runtime.*;
import thinice.util.*;
import thinice.lexer.*;
import thinice.AST.*;
import thinice.TS.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 24 16:25:37 VET 2013
  */
public class ThinIceParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ThinIceParser() {super();}

  /** Constructor which sets the default scanner. */
  public ThinIceParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ThinIceParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\010\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\004\000\002" +
    "\005\004\000\002\006\003\000\002\006\003\000\002\007" +
    "\005\000\002\010\006\000\002\011\005\000\002\011\003" +
    "\000\002\012\012\000\002\013\006\000\002\013\003\000" +
    "\002\014\010\000\002\015\015\000\002\016\005\000\002" +
    "\016\005\000\002\016\004\000\002\016\003\000\002\017" +
    "\005\000\002\017\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\021\005\000\002\021\003\000\002" +
    "\022\003\000\002\022\003\000\002\023\005\000\002\023" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\025\005\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\026\003\000\002\026\003\000\002" +
    "\027\003\000\002\027\003\000\002\030\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\004\004\005\001\002\000\004\002\154\001" +
    "\002\000\004\005\006\001\002\000\004\006\007\001\002" +
    "\000\004\007\010\001\002\000\020\015\012\016\022\017" +
    "\015\021\020\023\030\045\017\047\014\001\002\000\046" +
    "\006\uffcd\012\uffcd\013\uffcd\014\uffcd\024\uffcd\025\uffcd\026" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\035\uffcd" +
    "\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\001\002\000" +
    "\004\045\ufff4\001\002\000\004\013\153\001\002\000\024" +
    "\010\ufff7\015\ufff7\016\ufff7\017\ufff7\021\ufff7\022\ufff7\023" +
    "\ufff7\045\ufff7\047\ufff7\001\002\000\004\005\137\001\002" +
    "\000\004\045\034\001\002\000\052\005\127\006\uffce\011" +
    "\112\012\uffce\013\uffce\014\uffce\024\uffce\025\uffce\026\uffce" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\035\uffce\036" +
    "\uffce\037\uffce\040\uffce\041\uffce\042\uffce\001\002\000\020" +
    "\015\012\016\022\017\015\021\020\023\030\045\017\047" +
    "\014\001\002\000\004\013\121\001\002\000\004\045\ufff3" +
    "\001\002\000\022\010\120\015\012\016\022\017\015\021" +
    "\020\023\030\045\017\047\014\001\002\000\004\013\117" +
    "\001\002\000\004\024\115\001\002\000\024\010\ufffa\015" +
    "\ufffa\016\ufffa\017\ufffa\021\ufffa\022\ufffa\023\ufffa\045\ufffa" +
    "\047\ufffa\001\002\000\024\010\ufff9\015\ufff9\016\ufff9\017" +
    "\ufff9\021\ufff9\022\ufff9\023\ufff9\045\ufff9\047\ufff9\001\002" +
    "\000\004\005\033\001\002\000\024\010\ufff8\015\ufff8\016" +
    "\ufff8\017\ufff8\021\ufff8\022\ufff8\023\ufff8\045\ufff8\047\ufff8" +
    "\001\002\000\024\010\ufffe\015\ufffe\016\ufffe\017\ufffe\021" +
    "\ufffe\022\ufffe\023\ufffe\045\ufffe\047\ufffe\001\002\000\004" +
    "\045\034\001\002\000\010\011\112\013\uffce\024\uffce\001" +
    "\002\000\004\013\036\001\002\000\004\045\034\001\002" +
    "\000\004\013\040\001\002\000\014\005\047\034\053\043" +
    "\041\044\042\045\017\001\002\000\044\006\uffcf\012\uffcf" +
    "\013\uffcf\014\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\001\002\000\044\006\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\042\uffd0\001\002\000\044\006\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\001\002\000\004\006\105\001\002\000\044\006" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\041\uffd1\042\uffd1\001\002\000\044\006\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\025\uffdc\026\uffdc\027\064\030" +
    "\063\031\061\032\uffdc\033\uffdc\035\uffdc\036\uffdc\037\uffdc" +
    "\040\uffdc\041\uffdc\042\uffdc\001\002\000\014\005\047\034" +
    "\053\043\041\044\042\045\017\001\002\000\032\006\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\032\067\033\076\035\070\036" +
    "\077\037\073\040\071\041\074\042\075\001\002\000\044" +
    "\006\uffd3\012\uffd3\013\uffd3\014\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\041\uffd3\042\uffd3\001\002\000\044\006" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\033\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\001\002\000\014\005\047" +
    "\034\053\043\041\044\042\045\017\001\002\000\036\006" +
    "\uffe4\012\uffe4\013\uffe4\014\uffe4\025\057\026\055\032\uffe4" +
    "\033\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\001\002\000\012\005\uffda\043\uffda\044\uffda\045\uffda" +
    "\001\002\000\012\005\047\043\041\044\042\045\017\001" +
    "\002\000\012\005\uffdb\043\uffdb\044\uffdb\045\uffdb\001\002" +
    "\000\044\006\uffdd\012\uffdd\013\uffdd\014\uffdd\025\uffdd\026" +
    "\uffdd\027\064\030\063\031\061\032\uffdd\033\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\001\002\000" +
    "\012\005\uffd5\043\uffd5\044\uffd5\045\uffd5\001\002\000\012" +
    "\005\047\043\041\044\042\045\017\001\002\000\012\005" +
    "\uffd6\043\uffd6\044\uffd6\045\uffd6\001\002\000\012\005\uffd7" +
    "\043\uffd7\044\uffd7\045\uffd7\001\002\000\044\006\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\035\uffd9\036\uffd9\037\uffd9\040" +
    "\uffd9\041\uffd9\042\uffd9\001\002\000\012\006\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\001\002\000\012\005\047\043\041\044" +
    "\042\045\017\001\002\000\012\005\uffe3\043\uffe3\044\uffe3" +
    "\045\uffe3\001\002\000\012\005\uffe1\043\uffe1\044\uffe1\045" +
    "\uffe1\001\002\000\012\005\047\043\041\044\042\045\017" +
    "\001\002\000\012\005\uffe0\043\uffe0\044\uffe0\045\uffe0\001" +
    "\002\000\012\005\uffdf\043\uffdf\044\uffdf\045\uffdf\001\002" +
    "\000\012\005\uffde\043\uffde\044\uffde\045\uffde\001\002\000" +
    "\012\005\047\043\041\044\042\045\017\001\002\000\012" +
    "\005\uffe2\043\uffe2\044\uffe2\045\uffe2\001\002\000\026\006" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\035\070\036\077\037\073" +
    "\040\071\041\074\042\075\001\002\000\036\006\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\025\057\026\055\032\uffe5\033\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\001" +
    "\002\000\026\006\uffe9\012\uffe9\013\uffe9\014\uffe9\035\070" +
    "\036\077\037\073\040\071\041\074\042\075\001\002\000" +
    "\004\006\104\001\002\000\044\006\uffd4\012\uffd4\013\uffd4" +
    "\014\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\001\002\000\004\007\106\001\002\000\020\015" +
    "\012\016\022\017\015\021\020\023\030\045\017\047\014" +
    "\001\002\000\022\010\110\015\012\016\022\017\015\021" +
    "\020\023\030\045\017\047\014\001\002\000\024\010\uffea" +
    "\015\uffea\016\uffea\017\uffea\021\uffea\022\uffea\023\uffea\045" +
    "\uffea\047\uffea\001\002\000\024\010\uffff\015\uffff\016\uffff" +
    "\017\uffff\021\uffff\022\uffff\023\uffff\045\uffff\047\uffff\001" +
    "\002\000\014\005\047\034\053\043\041\044\042\045\017" +
    "\001\002\000\004\012\114\001\002\000\046\006\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\041\uffcc\042\uffcc\001\002\000\014\005\047" +
    "\034\053\043\041\044\042\045\017\001\002\000\004\013" +
    "\ufff2\001\002\000\024\010\ufffc\015\ufffc\016\ufffc\017\ufffc" +
    "\021\ufffc\022\ufffc\023\ufffc\045\ufffc\047\ufffc\001\002\000" +
    "\004\002\001\001\002\000\024\010\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\021\ufffb\022\ufffb\023\ufffb\045\ufffb\047\ufffb\001" +
    "\002\000\022\015\012\016\022\017\015\021\020\022\123" +
    "\023\030\045\017\047\014\001\002\000\004\005\124\001" +
    "\002\000\014\005\047\034\053\043\041\044\042\045\017" +
    "\001\002\000\004\006\126\001\002\000\024\010\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\021\uffeb\022\uffeb\023\uffeb\045\uffeb" +
    "\047\uffeb\001\002\000\014\005\047\034\053\043\041\044" +
    "\042\045\017\001\002\000\006\006\133\014\132\001\002" +
    "\000\006\006\uffef\014\uffef\001\002\000\014\005\047\034" +
    "\053\043\041\044\042\045\017\001\002\000\044\006\ufff1" +
    "\012\ufff1\013\ufff1\014\ufff1\025\ufff1\026\ufff1\027\ufff1\030" +
    "\ufff1\031\ufff1\032\ufff1\033\ufff1\035\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\041\ufff1\042\ufff1\001\002\000\006\006\ufff0\014" +
    "\ufff0\001\002\000\006\013\ufff6\024\115\001\002\000\004" +
    "\013\ufff5\001\002\000\014\005\047\034\053\043\041\044" +
    "\042\045\017\001\002\000\004\006\141\001\002\000\004" +
    "\007\142\001\002\000\020\015\012\016\022\017\015\021" +
    "\020\023\030\045\017\047\014\001\002\000\022\010\144" +
    "\015\012\016\022\017\015\021\020\023\030\045\017\047" +
    "\014\001\002\000\006\020\145\046\146\001\002\000\004" +
    "\007\150\001\002\000\024\010\uffec\015\uffec\016\uffec\017" +
    "\uffec\021\uffec\022\uffec\023\uffec\045\uffec\047\uffec\001\002" +
    "\000\024\010\uffee\015\uffee\016\uffee\017\uffee\021\uffee\022" +
    "\uffee\023\uffee\045\uffee\047\uffee\001\002\000\020\015\012" +
    "\016\022\017\015\021\020\023\030\045\017\047\014\001" +
    "\002\000\022\010\152\015\012\016\022\017\015\021\020" +
    "\023\030\045\017\047\014\001\002\000\024\010\uffed\015" +
    "\uffed\016\uffed\017\uffed\021\uffed\022\uffed\023\uffed\045\uffed" +
    "\047\uffed\001\002\000\024\010\ufffd\015\ufffd\016\ufffd\017" +
    "\ufffd\021\ufffd\022\ufffd\023\ufffd\045\ufffd\047\ufffd\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\022\004\031\005\012\006\015\007\023\010\020\012" +
    "\025\014\026\015\030\027\024\030\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\135\027\134\030\010" +
    "\001\001\000\002\001\001\000\030\003\121\004\031\005" +
    "\012\006\015\007\023\010\020\012\025\014\026\015\030" +
    "\027\024\030\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\110\005\012\006\015\007\023\010\020" +
    "\012\025\014\026\015\030\027\024\030\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\034\027\024\030\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\036\027\024\030" +
    "\010\001\001\000\002\001\001\000\024\010\050\016\043" +
    "\017\047\021\053\023\045\025\042\026\051\027\044\030" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\061\001\001\000\024\010\050\016\102\017\047\021\053" +
    "\023\045\025\042\026\051\027\044\030\010\001\001\000" +
    "\004\020\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\050\016\065\017\047\021\053\023\045\025" +
    "\042\026\051\027\044\030\010\001\001\000\004\022\055" +
    "\001\001\000\002\001\001\000\016\010\050\023\057\025" +
    "\042\026\051\027\044\030\010\001\001\000\002\001\001" +
    "\000\004\024\061\001\001\000\002\001\001\000\014\010" +
    "\050\025\064\026\051\027\044\030\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\010\050\017\101\021\053\023\045\025\042" +
    "\026\051\027\044\030\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\050\021\100\023\045\025\042" +
    "\026\051\027\044\030\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\010\050\017\077" +
    "\021\053\023\045\025\042\026\051\027\044\030\010\001" +
    "\001\000\002\001\001\000\004\020\071\001\001\000\004" +
    "\022\055\001\001\000\004\020\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\106" +
    "\004\031\005\012\006\015\007\023\010\020\012\025\014" +
    "\026\015\030\027\024\030\010\001\001\000\026\004\110" +
    "\005\012\006\015\007\023\010\020\012\025\014\026\015" +
    "\030\027\024\030\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\010\050\016\112\017\047\021\053\023" +
    "\045\025\042\026\051\027\044\030\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\050\016\115\017" +
    "\047\021\053\023\045\025\042\026\051\027\044\030\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\110\005\012\006\015" +
    "\007\023\010\020\012\025\014\026\015\030\027\024\030" +
    "\010\001\001\000\002\001\001\000\024\010\050\016\124" +
    "\017\047\021\053\023\045\025\042\026\051\027\044\030" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\010\050\011\127\016\130\017\047\021\053\023\045\025" +
    "\042\026\051\027\044\030\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\010\050\016\133\017\047\021" +
    "\053\023\045\025\042\026\051\027\044\030\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\010\050\016\137\017\047\021\053" +
    "\023\045\025\042\026\051\027\044\030\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\142\004\031" +
    "\005\012\006\015\007\023\010\020\012\025\014\026\015" +
    "\030\027\024\030\010\001\001\000\026\004\110\005\012" +
    "\006\015\007\023\010\020\012\025\014\026\015\030\027" +
    "\024\030\010\001\001\000\004\013\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\150\004\031\005\012\006\015\007\023\010\020\012\025" +
    "\014\026\015\030\027\024\030\010\001\001\000\026\004" +
    "\110\005\012\006\015\007\023\010\020\012\025\014\026" +
    "\015\030\027\024\030\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ThinIceParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ThinIceParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ThinIceParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ThinIceParser$actions {

 

	int getLinea() {
		return ((ThinIceLexer)parser.getScanner()).getLinea();
	}

	int getColumna(){
		return ((ThinIceLexer)parser.getScanner()).getColumna();
	}

	/*
	SimboloAbstracto getNombreArchivo() {
		return ((ThinIceLexer)parser.getScanner()).getNombreArchivo();
	}
	*/

  private final ThinIceParser parser;

  /** Constructor */
  CUP$ThinIceParser$actions(ThinIceParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ThinIceParser$do_action(
    int                        CUP$ThinIceParser$act_num,
    java_cup.runtime.lr_parser CUP$ThinIceParser$parser,
    java.util.Stack            CUP$ThinIceParser$stack,
    int                        CUP$ThinIceParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ThinIceParser$result;

      /* select the action based on the action number */
      switch (CUP$ThinIceParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // vector ::= ID COR_I exp COR_D 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("vector",22, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variable ::= vector 
            {
              Object RESULT =null;
		Object vec = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("variable",21, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variable ::= ID 
            {
              Object RESULT =null;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("variable",21, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // literal ::= BOOLEANO 
            {
              Object RESULT =null;
		Object tok = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
                    SimboloAbstracto sim = TablaAbstracta.boolTabla.getSimbolo(tok.toString());
                    RESULT=new Booleano(sim, sim.getLinea(), sim.getColumna());
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("literal",20, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // literal ::= ENTERO 
            {
              Object RESULT =null;
		Object tok = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
                    SimboloAbstracto sim = TablaAbstracta.boolTabla.getSimbolo(tok.toString());
                    RESULT=new Booleano(sim, sim.getLinea(), sim.getColumna());
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("literal",20, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // termino ::= variable 
            {
              Object RESULT =null;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("termino",19, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // termino ::= literal 
            {
              Object RESULT =null;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("termino",19, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // termino ::= func_call 
            {
              Object RESULT =null;
		Object fc = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("termino",19, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // termino ::= PAR_I exp PAR_D 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("termino",19, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // op_factor ::= MOD 
            {
              Object RESULT =null;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("op_factor",18, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // op_factor ::= DIV 
            {
              Object RESULT =null;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("op_factor",18, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // op_factor ::= MULTI 
            {
              Object RESULT =null;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("op_factor",18, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp_factor ::= termino 
            {
              Object RESULT =null;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("exp_factor",17, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp_factor ::= exp_factor op_factor termino 
            {
              Object RESULT =null;
		Object efa = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-2)).value;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("exp_factor",17, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // op_aritmetica ::= RESTA 
            {
              Object RESULT =null;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("op_aritmetica",16, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // op_aritmetica ::= SUMA 
            {
              Object RESULT =null;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("op_aritmetica",16, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp_aritmetica ::= exp_factor 
            {
              Object RESULT =null;
		Object efa = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("exp_aritmetica",15, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp_aritmetica ::= exp_aritmetica op_aritmetica exp_factor 
            {
              Object RESULT =null;
		Object ear = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-2)).value;
		Object oa = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		Object efa = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("exp_aritmetica",15, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // op_comparacion ::= DIFERENTE 
            {
              Object RESULT =null;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("op_comparacion",14, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // op_comparacion ::= IGUAL 
            {
              Object RESULT =null;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("op_comparacion",14, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // op_comparacion ::= MAYOR 
            {
              Object RESULT =null;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("op_comparacion",14, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // op_comparacion ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("op_comparacion",14, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // op_comparacion ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("op_comparacion",14, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // op_comparacion ::= MENOR 
            {
              Object RESULT =null;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("op_comparacion",14, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp_booleana ::= exp_aritmetica 
            {
              Object RESULT =null;
		Object ear = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("exp_booleana",13, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp_booleana ::= exp_booleana op_comparacion exp_aritmetica 
            {
              Object RESULT =null;
		Object ebo = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-2)).value;
		Object oc = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		Object ear = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("exp_booleana",13, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= exp_booleana 
            {
              Object RESULT =null;
		Object ebo = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("exp",12, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= NOT exp 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("exp",12, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= exp_booleana OR exp_booleana 
            {
              Object RESULT =null;
		Object ebi = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-2)).value;
		Object ebo = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("exp",12, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= exp_booleana AND exp_booleana 
            {
              Object RESULT =null;
		Object ebi = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-2)).value;
		Object ebo = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("exp",12, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sent_for ::= FOR PAR_I sent_asig PUNT_C sent_asig PUNT_C exp PAR_D LLA_I lista_sent LLA_D 
            {
              Object RESULT =null;
		Object sai = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-8)).value;
		Object sap = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-6)).value;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-4)).value;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent_for",11, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sent_do ::= DO lista_sent WHILE PAR_I exp PAR_D 
            {
              Object RESULT =null;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-4)).value;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent_do",10, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // else ::= EMPTY 
            {
              Object RESULT =null;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("else",9, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // else ::= ELSE LLA_I lista_sent LLA_D 
            {
              Object RESULT =null;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("else",9, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sent_if ::= IF PAR_I exp PAR_D LLA_I lista_sent LLA_D else 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-5)).value;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-2)).value;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent_if",8, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_parm ::= exp 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("lista_parm",7, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_parm ::= lista_parm COMA exp 
            {
              Object RESULT =null;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-2)).value;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("lista_parm",7, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // func_call ::= ID PAR_I lista_parm PAR_D 
            {
              Object RESULT =null;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("func_call",6, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sent_asig ::= variable ASIG exp 
            {
              Object RESULT =null;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-2)).value;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent_asig",5, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_var ::= BOOLEAN 
            {
              Object RESULT =null;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("tipo_var",4, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo_var ::= INT 
            {
              Object RESULT =null;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("tipo_var",4, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sent_decl ::= tipo_var sent_asig 
            {
              Object RESULT =null;
		Object tv = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		Object sa = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent_decl",3, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sent_decl ::= tipo_var variable 
            {
              Object RESULT =null;
		Object tv = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent_decl",3, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent ::= ERROR 
            {
              Object RESULT =null;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent",2, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sent ::= sent_for 
            {
              Object RESULT =null;
		Object sf = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent",2, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent ::= sent_do 
            {
              Object RESULT =null;
		Object sdw = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent",2, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= sent_if 
            {
              Object RESULT =null;
		Object si = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent",2, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent ::= func_call PUNT_C 
            {
              Object RESULT =null;
		Object fc = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent",2, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= sent_asig PUNT_C 
            {
              Object RESULT =null;
		Object sa = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent",2, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= sent_decl PUNT_C 
            {
              Object RESULT =null;
		Object sd = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent",2, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_sent ::= sent 
            {
              Object RESULT =null;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("lista_sent",1, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_sent ::= lista_sent sent 
            {
              Object RESULT =null;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("lista_sent",1, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		RESULT = start_val;
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ThinIceParser$parser.done_parsing();
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= PROGRAM PAR_I PAR_D LLA_I lista_sent LLA_D 
            {
              Object RESULT =null;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("programa",0, RESULT);
            }
          return CUP$ThinIceParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

