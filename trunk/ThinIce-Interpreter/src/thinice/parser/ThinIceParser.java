
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Oct 25 00:32:46 VET 2013
//----------------------------------------------------

package thinice.parser;

import java_cup.runtime.*;
import thinice.util.*;
import thinice.lexer.*;
import thinice.AST.*;
import thinice.TS.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Oct 25 00:32:46 VET 2013
  */
public class ThinIceParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ThinIceParser() {super();}

  /** Constructor which sets the default scanner. */
  public ThinIceParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ThinIceParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\010\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\004\000\002" +
    "\005\004\000\002\006\003\000\002\006\003\000\002\007" +
    "\005\000\002\010\006\000\002\011\005\000\002\011\003" +
    "\000\002\012\011\000\002\012\015\000\002\013\010\000" +
    "\002\014\015\000\002\015\005\000\002\015\005\000\002" +
    "\015\004\000\002\015\003\000\002\016\005\000\002\016" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\020\005\000\002\020\005\000\002\020\003\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\003\000\002\022\005\000\002\022\003\000\002\022\003" +
    "\000\002\023\003\000\002\023\003\000\002\024\003\000" +
    "\002\024\003\000\002\025\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\004\004\005\001\002\000\004\002\152\001" +
    "\002\000\004\005\006\001\002\000\004\006\007\001\002" +
    "\000\004\007\010\001\002\000\020\015\012\016\022\017" +
    "\015\021\020\023\030\045\017\046\014\001\002\000\046" +
    "\006\uffd1\012\uffd1\013\uffd1\014\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\035\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\001\002\000" +
    "\004\045\ufff4\001\002\000\004\013\151\001\002\000\024" +
    "\010\ufff7\015\ufff7\016\ufff7\017\ufff7\021\ufff7\022\ufff7\023" +
    "\ufff7\045\ufff7\046\ufff7\001\002\000\004\005\137\001\002" +
    "\000\004\045\034\001\002\000\010\005\127\011\112\024" +
    "\uffd2\001\002\000\020\015\012\016\022\017\015\021\020" +
    "\023\030\045\017\046\014\001\002\000\004\013\121\001" +
    "\002\000\004\045\ufff3\001\002\000\022\010\120\015\012" +
    "\016\022\017\015\021\020\023\030\045\017\046\014\001" +
    "\002\000\004\013\117\001\002\000\004\024\115\001\002" +
    "\000\024\010\ufffa\015\ufffa\016\ufffa\017\ufffa\021\ufffa\022" +
    "\ufffa\023\ufffa\045\ufffa\046\ufffa\001\002\000\024\010\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\021\ufff9\022\ufff9\023\ufff9\045" +
    "\ufff9\046\ufff9\001\002\000\004\005\033\001\002\000\024" +
    "\010\ufff8\015\ufff8\016\ufff8\017\ufff8\021\ufff8\022\ufff8\023" +
    "\ufff8\045\ufff8\046\ufff8\001\002\000\024\010\ufffe\015\ufffe" +
    "\016\ufffe\017\ufffe\021\ufffe\022\ufffe\023\ufffe\045\ufffe\046" +
    "\ufffe\001\002\000\004\045\034\001\002\000\050\006\uffd2" +
    "\011\112\012\uffd2\013\uffd2\014\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\001\002\000" +
    "\004\013\036\001\002\000\004\045\034\001\002\000\004" +
    "\013\040\001\002\000\014\005\047\034\052\043\041\044" +
    "\044\045\034\001\002\000\044\006\uffd3\012\uffd3\013\uffd3" +
    "\014\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\001\002\000\044\006\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042" +
    "\uffd5\001\002\000\004\006\105\001\002\000\044\006\uffd4" +
    "\012\uffd4\013\uffd4\014\uffd4\025\uffd4\026\uffd4\027\uffd4\030" +
    "\uffd4\031\uffd4\032\uffd4\033\uffd4\035\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\001\002\000\044\006\uffd8\012" +
    "\uffd8\013\uffd8\014\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\035\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\001\002\000\044\006\uffdc\012\uffdc" +
    "\013\uffdc\014\uffdc\025\uffdc\026\uffdc\027\061\030\060\031" +
    "\057\032\uffdc\033\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\001\002\000\014\005\047\034\052\043" +
    "\041\044\044\045\034\001\002\000\032\006\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\032\067\033\076\035\070\036\077\037" +
    "\073\040\071\041\074\042\075\001\002\000\044\006\uffd6" +
    "\012\uffd6\013\uffd6\014\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\001\002\000\014\005\047\034" +
    "\052\043\041\044\044\045\034\001\002\000\036\006\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\025\055\026\054\032\uffe5\033" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5" +
    "\001\002\000\012\005\047\043\041\044\044\045\034\001" +
    "\002\000\012\005\047\043\041\044\044\045\034\001\002" +
    "\000\044\006\uffde\012\uffde\013\uffde\014\uffde\025\uffde\026" +
    "\uffde\027\061\030\060\031\057\032\uffde\033\uffde\035\uffde" +
    "\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\001\002\000" +
    "\012\005\047\043\041\044\044\045\034\001\002\000\012" +
    "\005\047\043\041\044\044\045\034\001\002\000\012\005" +
    "\047\043\041\044\044\045\034\001\002\000\044\006\uffdb" +
    "\012\uffdb\013\uffdb\014\uffdb\025\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\033\uffdb\035\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\041\uffdb\042\uffdb\001\002\000\044\006\uffda\012" +
    "\uffda\013\uffda\014\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\031\uffda\032\uffda\033\uffda\035\uffda\036\uffda\037\uffda\040" +
    "\uffda\041\uffda\042\uffda\001\002\000\044\006\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9" +
    "\041\uffd9\042\uffd9\001\002\000\044\006\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\025\uffdd\026\uffdd\027\061\030\060\031\057" +
    "\032\uffdd\033\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\042\uffdd\001\002\000\012\006\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\001\002\000\012\005\047\043\041\044\044\045" +
    "\034\001\002\000\012\005\uffe4\043\uffe4\044\uffe4\045\uffe4" +
    "\001\002\000\012\005\uffe2\043\uffe2\044\uffe2\045\uffe2\001" +
    "\002\000\012\005\047\043\041\044\044\045\034\001\002" +
    "\000\012\005\uffe1\043\uffe1\044\uffe1\045\uffe1\001\002\000" +
    "\012\005\uffe0\043\uffe0\044\uffe0\045\uffe0\001\002\000\012" +
    "\005\uffdf\043\uffdf\044\uffdf\045\uffdf\001\002\000\012\005" +
    "\047\043\041\044\044\045\034\001\002\000\012\005\uffe3" +
    "\043\uffe3\044\uffe3\045\uffe3\001\002\000\026\006\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\035\070\036\077\037\073\040\071" +
    "\041\074\042\075\001\002\000\036\006\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\025\055\026\054\032\uffe6\033\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\001\002\000" +
    "\026\006\uffea\012\uffea\013\uffea\014\uffea\035\070\036\077" +
    "\037\073\040\071\041\074\042\075\001\002\000\004\006" +
    "\104\001\002\000\044\006\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\001\002\000\004\007\106\001\002\000\020\015\012\016" +
    "\022\017\015\021\020\023\030\045\017\046\014\001\002" +
    "\000\022\010\110\015\012\016\022\017\015\021\020\023" +
    "\030\045\017\046\014\001\002\000\024\010\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\021\uffeb\022\uffeb\023\uffeb\045\uffeb\046" +
    "\uffeb\001\002\000\024\010\uffff\015\uffff\016\uffff\017\uffff" +
    "\021\uffff\022\uffff\023\uffff\045\uffff\046\uffff\001\002\000" +
    "\014\005\047\034\052\043\041\044\044\045\034\001\002" +
    "\000\004\012\114\001\002\000\046\006\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\035\uffd0\036\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\042\uffd0\001\002\000\014\005\047\034\052" +
    "\043\041\044\044\045\034\001\002\000\004\013\ufff2\001" +
    "\002\000\024\010\ufffc\015\ufffc\016\ufffc\017\ufffc\021\ufffc" +
    "\022\ufffc\023\ufffc\045\ufffc\046\ufffc\001\002\000\004\002" +
    "\001\001\002\000\024\010\ufffb\015\ufffb\016\ufffb\017\ufffb" +
    "\021\ufffb\022\ufffb\023\ufffb\045\ufffb\046\ufffb\001\002\000" +
    "\022\015\012\016\022\017\015\021\020\022\123\023\030" +
    "\045\017\046\014\001\002\000\004\005\124\001\002\000" +
    "\014\005\047\034\052\043\041\044\044\045\034\001\002" +
    "\000\004\006\126\001\002\000\024\010\uffec\015\uffec\016" +
    "\uffec\017\uffec\021\uffec\022\uffec\023\uffec\045\uffec\046\uffec" +
    "\001\002\000\014\005\047\034\052\043\041\044\044\045" +
    "\034\001\002\000\006\006\133\014\132\001\002\000\006" +
    "\006\uffef\014\uffef\001\002\000\014\005\047\034\052\043" +
    "\041\044\044\045\034\001\002\000\004\013\ufff1\001\002" +
    "\000\006\006\ufff0\014\ufff0\001\002\000\006\013\ufff6\024" +
    "\115\001\002\000\004\013\ufff5\001\002\000\014\005\047" +
    "\034\052\043\041\044\044\045\034\001\002\000\004\006" +
    "\141\001\002\000\004\007\142\001\002\000\020\015\012" +
    "\016\022\017\015\021\020\023\030\045\017\046\014\001" +
    "\002\000\022\010\144\015\012\016\022\017\015\021\020" +
    "\023\030\045\017\046\014\001\002\000\026\010\uffee\015" +
    "\uffee\016\uffee\017\uffee\020\145\021\uffee\022\uffee\023\uffee" +
    "\045\uffee\046\uffee\001\002\000\004\007\146\001\002\000" +
    "\020\015\012\016\022\017\015\021\020\023\030\045\017" +
    "\046\014\001\002\000\022\010\150\015\012\016\022\017" +
    "\015\021\020\023\030\045\017\046\014\001\002\000\024" +
    "\010\uffed\015\uffed\016\uffed\017\uffed\021\uffed\022\uffed\023" +
    "\uffed\045\uffed\046\uffed\001\002\000\024\010\ufffd\015\ufffd" +
    "\016\ufffd\017\ufffd\021\ufffd\022\ufffd\023\ufffd\045\ufffd\046" +
    "\ufffd\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\022\004\031\005\012\006\015\007\023\010\020\012" +
    "\025\013\026\014\030\024\024\025\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\135\024\134\025\010" +
    "\001\001\000\002\001\001\000\030\003\121\004\031\005" +
    "\012\006\015\007\023\010\020\012\025\013\026\014\030" +
    "\024\024\025\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\110\005\012\006\015\007\023\010\020" +
    "\012\025\013\026\014\030\024\024\025\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\034\024\024\025\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\036\024\024\025" +
    "\010\001\001\000\002\001\001\000\022\015\042\016\047" +
    "\020\052\021\045\022\044\023\050\024\041\025\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\102\016\047\020\052\021\045\022\044\023\050" +
    "\024\041\025\010\001\001\000\004\017\071\001\001\000" +
    "\002\001\001\000\022\015\065\016\047\020\052\021\045" +
    "\022\044\023\050\024\041\025\010\001\001\000\002\001" +
    "\001\000\014\021\064\022\044\023\050\024\041\025\010" +
    "\001\001\000\014\021\055\022\044\023\050\024\041\025" +
    "\010\001\001\000\002\001\001\000\012\022\063\023\050" +
    "\024\041\025\010\001\001\000\012\022\062\023\050\024" +
    "\041\025\010\001\001\000\012\022\061\023\050\024\041" +
    "\025\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\016\101\020\052\021\045\022\044\023\050\024\041\025" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\020\100\021\045\022\044\023\050\024\041\025\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\016\077\020\052\021\045\022\044\023\050\024" +
    "\041\025\010\001\001\000\002\001\001\000\004\017\071" +
    "\001\001\000\002\001\001\000\004\017\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\106\004\031\005\012\006\015\007\023\010\020\012" +
    "\025\013\026\014\030\024\024\025\010\001\001\000\026" +
    "\004\110\005\012\006\015\007\023\010\020\012\025\013" +
    "\026\014\030\024\024\025\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\112\016\047\020\052\021" +
    "\045\022\044\023\050\024\041\025\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\115\016\047\020" +
    "\052\021\045\022\044\023\050\024\041\025\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\004\110\005\012\006\015\007\023" +
    "\010\020\012\025\013\026\014\030\024\024\025\010\001" +
    "\001\000\002\001\001\000\022\015\124\016\047\020\052" +
    "\021\045\022\044\023\050\024\041\025\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\011\127\015\130" +
    "\016\047\020\052\021\045\022\044\023\050\024\041\025" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\133\016\047\020\052\021\045\022\044\023\050\024" +
    "\041\025\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\137\016" +
    "\047\020\052\021\045\022\044\023\050\024\041\025\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\142\004\031\005\012\006\015\007\023\010\020\012\025" +
    "\013\026\014\030\024\024\025\010\001\001\000\026\004" +
    "\110\005\012\006\015\007\023\010\020\012\025\013\026" +
    "\014\030\024\024\025\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\146\004\031\005\012\006\015" +
    "\007\023\010\020\012\025\013\026\014\030\024\024\025" +
    "\010\001\001\000\026\004\110\005\012\006\015\007\023" +
    "\010\020\012\025\013\026\014\030\024\024\025\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ThinIceParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ThinIceParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ThinIceParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int omerrs = 0;

    public int getOmerrs(){
        return omerrs;
    }

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.getLinea();
        int column = action_obj.getColumna();
	String filename = action_obj.getNombreArchivo().getTexto();
        System.err.print(filename + ": " + lineno 
		         + ":" + column + ": error de sintáxis cerca de ");
        Utilidades.imprimirToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("El análisis se ha detenido porque se encontraron muchos errores");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ThinIceParser$actions {

 

	boolean declaracion;

	int getLinea() {
		return ((ThinIceLexer)parser.getScanner()).getLinea();
	}

	int getColumna(){
		return ((ThinIceLexer)parser.getScanner()).getColumna();
	}

	SimboloAbstracto getNombreArchivo() {
		return ((ThinIceLexer)parser.getScanner()).getNombreArchivo();
	}

  private final ThinIceParser parser;

  /** Constructor */
  CUP$ThinIceParser$actions(ThinIceParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ThinIceParser$do_action(
    int                        CUP$ThinIceParser$act_num,
    java_cup.runtime.lr_parser CUP$ThinIceParser$parser,
    java.util.Stack            CUP$ThinIceParser$stack,
    int                        CUP$ThinIceParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ThinIceParser$result;

      /* select the action based on the action number */
      switch (CUP$ThinIceParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // vector ::= ID COR_I exp COR_D 
            {
              PosVector RESULT =null;
		SimboloAbstracto id = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-3)).value;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		
					RESULT = new PosVector(id, e, id.getLinea(), id.getColumna());
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("vector",19, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variable ::= vector 
            {
              Variable RESULT =null;
		PosVector vec = (PosVector)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = vec;
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("variable",18, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // variable ::= ID 
            {
              Variable RESULT =null;
		SimboloAbstracto id = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = new Variable(id, id.getLinea(), id.getColumna());
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("variable",18, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // literal ::= BOOLEANO 
            {
              Constante RESULT =null;
		SimboloAbstracto b = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = new Booleano(b, b.getLinea(), b.getColumna());
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("literal",17, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // literal ::= ENTERO 
            {
              Constante RESULT =null;
		SimboloAbstracto i = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = new Entero(i, i.getLinea(), i.getColumna());
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("literal",17, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // termino ::= variable 
            {
              Expresion RESULT =null;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = v;
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("termino",16, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // termino ::= literal 
            {
              Expresion RESULT =null;
		Constante li = (Constante)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = li;
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("termino",16, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // termino ::= PAR_I exp PAR_D 
            {
              Expresion RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		
					RESULT = e;
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("termino",16, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp_factor ::= termino 
            {
              Expresion RESULT =null;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = t;
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("exp_factor",15, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp_factor ::= exp_factor MOD termino 
            {
              Expresion RESULT =null;
		Expresion efa = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-2)).value;
		SimboloAbstracto of = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = new Modulo(efa, t, of.getLinea(), of.getColumna());
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("exp_factor",15, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp_factor ::= exp_factor DIV termino 
            {
              Expresion RESULT =null;
		Expresion efa = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-2)).value;
		SimboloAbstracto of = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = new Division(efa, t, of.getLinea(), of.getColumna());
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("exp_factor",15, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp_factor ::= exp_factor MULTI termino 
            {
              Expresion RESULT =null;
		Expresion efa = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-2)).value;
		SimboloAbstracto of = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = new Multiplicacion(efa, t, of.getLinea(), of.getColumna());
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("exp_factor",15, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp_aritmetica ::= exp_factor 
            {
              Expresion RESULT =null;
		Expresion efa = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = efa;
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("exp_aritmetica",14, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp_aritmetica ::= exp_aritmetica RESTA exp_factor 
            {
              Expresion RESULT =null;
		Expresion ear = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-2)).value;
		SimboloAbstracto r = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		Expresion efa = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = new Resta(ear, efa, r.getLinea(), r.getColumna());
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("exp_aritmetica",14, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp_aritmetica ::= exp_aritmetica SUMA exp_factor 
            {
              Expresion RESULT =null;
		Expresion ear = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-2)).value;
		SimboloAbstracto s = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		Expresion efa = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = new Suma(ear, efa, s.getLinea(), s.getColumna());
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("exp_aritmetica",14, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // op_comparacion ::= DIFERENTE 
            {
              Integer RESULT =null;
		
					RESULT = Relacionales.DIFERENTE;
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("op_comparacion",13, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // op_comparacion ::= IGUAL 
            {
              Integer RESULT =null;
		
					RESULT = Relacionales.IGUAL;
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("op_comparacion",13, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // op_comparacion ::= MAYOR 
            {
              Integer RESULT =null;
		
					RESULT = Relacionales.MAYOR;
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("op_comparacion",13, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // op_comparacion ::= MAYOR_IGUAL 
            {
              Integer RESULT =null;
		
					RESULT = Relacionales.MAYOR_IGUAL;
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("op_comparacion",13, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // op_comparacion ::= MENOR_IGUAL 
            {
              Integer RESULT =null;
		
					RESULT = Relacionales.MENOR_IGUAL;
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("op_comparacion",13, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // op_comparacion ::= MENOR 
            {
              Integer RESULT =null;
		
					RESULT = Relacionales.MENOR;
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("op_comparacion",13, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp_booleana ::= exp_aritmetica 
            {
              Expresion RESULT =null;
		Expresion ear = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = ear;
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("exp_booleana",12, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp_booleana ::= exp_booleana op_comparacion exp_aritmetica 
            {
              Expresion RESULT =null;
		Expresion ebo = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-2)).value;
		Integer oc = (Integer)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		Expresion ear = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = new Relacionales(ebo, ear, oc, getLinea(), getColumna());
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("exp_booleana",12, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= exp_booleana 
            {
              Expresion RESULT =null;
		Expresion ebo = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = ebo;
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("exp",11, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= NOT exp 
            {
              Expresion RESULT =null;
		SimboloAbstracto n = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = new Not(e, n.getLinea(), n.getColumna());
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("exp",11, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= exp_booleana OR exp_booleana 
            {
              Expresion RESULT =null;
		Expresion ebi = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-2)).value;
		SimboloAbstracto o = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		Expresion ebo = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = new Or(ebi, ebo, o.getLinea(), o.getColumna());
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("exp",11, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= exp_booleana AND exp_booleana 
            {
              Expresion RESULT =null;
		Expresion ebi = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-2)).value;
		SimboloAbstracto a = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		Expresion ebo = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = new And(ebi, ebo, a.getLinea(), a.getColumna());
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("exp",11, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sent_for ::= FOR PAR_I sent_asig PUNT_C sent_asig PUNT_C exp PAR_D LLA_I lista_sent LLA_D 
            {
              RepitaPara RESULT =null;
		SimboloAbstracto f = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-10)).value;
		Asignacion sai = (Asignacion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-8)).value;
		Asignacion sap = (Asignacion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-6)).value;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-4)).value;
		ListaSentencia ls = (ListaSentencia)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		
					RESULT = new RepitaPara(sai, sap, e, ls, f.getLinea(), f.getColumna());
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent_for",10, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sent_do ::= DO lista_sent WHILE PAR_I exp PAR_D 
            {
              RepitaHasta RESULT =null;
		SimboloAbstracto d = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-5)).value;
		ListaSentencia ls = (ListaSentencia)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-4)).value;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		
					RESULT = new RepitaHasta(e, ls, d.getLinea(), d.getColumna());
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent_do",9, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sent_if ::= IF PAR_I exp PAR_D LLA_I lista_sent LLA_D ELSE LLA_I lista_sent LLA_D 
            {
              Condicional RESULT =null;
		SimboloAbstracto i = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-10)).value;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-8)).value;
		ListaSentencia lsi = (ListaSentencia)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-5)).value;
		ListaSentencia lse = (ListaSentencia)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		
					RESULT = new Condicional(e, lsi, lse, i.getLinea(), i.getColumna());
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent_if",8, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sent_if ::= IF PAR_I exp PAR_D LLA_I lista_sent LLA_D 
            {
              Condicional RESULT =null;
		SimboloAbstracto i = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-6)).value;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-4)).value;
		ListaSentencia ls = (ListaSentencia)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		
					RESULT = new Condicional(e, ls, null, i.getLinea(), i.getColumna());
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent_if",8, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_parm ::= exp 
            {
              ListaParametros RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = new ListaParametros();
					RESULT.agregarElemento(e);
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("lista_parm",7, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_parm ::= lista_parm COMA exp 
            {
              ListaParametros RESULT =null;
		ListaParametros lp = (ListaParametros)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-2)).value;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					lp.agregarElemento(e);
					RESULT = lp;
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("lista_parm",7, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // func_call ::= ID PAR_I lista_parm PAR_D 
            {
              LlamadaFuncion RESULT =null;
		SimboloAbstracto id = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-3)).value;
		ListaParametros lp = (ListaParametros)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		
					RESULT = new LlamadaFuncion(id, lp, id.getLinea(), id.getColumna());
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("func_call",6, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sent_asig ::= variable ASIG exp 
            {
              Asignacion RESULT =null;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-2)).value;
		SimboloAbstracto a = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = new Asignacion(v, e, a.getLinea(), a.getColumna());
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent_asig",5, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_var ::= BOOLEAN 
            {
              TipoVariable RESULT =null;
		SimboloAbstracto b = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = new TipoBool(b);
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("tipo_var",4, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo_var ::= INT 
            {
              TipoVariable RESULT =null;
		SimboloAbstracto i = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = new TipoEntero(i);
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("tipo_var",4, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sent_decl ::= tipo_var sent_asig 
            {
              Declaracion RESULT =null;
		TipoVariable tv = (TipoVariable)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		Asignacion sa = (Asignacion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = new DeclCompleja(tv, sa, getLinea(), getColumna());
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent_decl",3, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sent_decl ::= tipo_var variable 
            {
              Declaracion RESULT =null;
		TipoVariable tv = (TipoVariable)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = new DeclSimple(tv, v, getLinea(), getColumna());
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent_decl",3, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent ::= ERROR 
            {
              Sentencia RESULT =null;
		SimboloAbstracto er = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = new SentError(er, getLinea(), getColumna());
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent",2, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sent ::= sent_for 
            {
              Sentencia RESULT =null;
		RepitaPara sf = (RepitaPara)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = sf;
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent",2, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent ::= sent_do 
            {
              Sentencia RESULT =null;
		RepitaHasta sdw = (RepitaHasta)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = sdw;
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent",2, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= sent_if 
            {
              Sentencia RESULT =null;
		Condicional si = (Condicional)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = si;
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent",2, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent ::= func_call PUNT_C 
            {
              Sentencia RESULT =null;
		LlamadaFuncion fc = (LlamadaFuncion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		
					RESULT = fc;
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent",2, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= sent_asig PUNT_C 
            {
              Sentencia RESULT =null;
		Asignacion sa = (Asignacion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		
					RESULT = sa;
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent",2, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= sent_decl PUNT_C 
            {
              Sentencia RESULT =null;
		Declaracion sd = (Declaracion)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		
					RESULT = sd;
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("sent",2, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_sent ::= sent 
            {
              ListaSentencia RESULT =null;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					RESULT = new ListaSentencia();
					RESULT.agregarElemento(s);
					
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("lista_sent",1, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_sent ::= lista_sent sent 
            {
              ListaSentencia RESULT =null;
		ListaSentencia ls = (ListaSentencia)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.peek()).value;
		
					ls.agregarElemento(s);
					RESULT = ls;
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("lista_sent",1, RESULT);
            }
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		RESULT = start_val;
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ThinIceParser$parser.done_parsing();
          return CUP$ThinIceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= PROGRAM PAR_I PAR_D LLA_I lista_sent LLA_D 
            {
              Programa RESULT =null;
		SimboloAbstracto p = (SimboloAbstracto)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-5)).value;
		ListaSentencia ls = (ListaSentencia)((java_cup.runtime.Symbol) CUP$ThinIceParser$stack.elementAt(CUP$ThinIceParser$top-1)).value;
		
					RESULT = new Programa(ls, p.getLinea(), p.getColumna());
				
              CUP$ThinIceParser$result = parser.getSymbolFactory().newSymbol("programa",0, RESULT);
            }
          return CUP$ThinIceParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

